 
    11	* **Prompt Display:** Displays a prompt to the user when waiting for a new command.
    12	* **Command History:** Maintains a history of previously entered commands.
    13	* **Executable Search and Launch:** Locates and executes commands based on the PATH variable or using relative/absolute paths.
    14	* **Signal Handling:** Handles `ctrl-C` (displays a new prompt), `ctrl-D` (exits the shell), and `ctrl-\` (does nothing) signals.
    15	* **Quote Handling:** Correctly interprets single quotes (`'`) and double quotes (`"`) to prevent unwanted meta-character interpretation. Double quotes allow for environment variable expansion.
    16	* **Redirections:**
    17	    * `<` :  Redirects input from a file.
    18	    * `>` :  Redirects output to a file.
    19	    * `<<` :  "Here document" - reads input until a specified delimiter.
    20	    * `>>` :  Redirects output to a file in append mode. [cite: 38, 39]
    21	* **Pipes:** Supports pipes (`|`) to chain commands, where the output of one command becomes the input of the next.
    22	* **Environment Variables:** Expands environment variables using the `$VAR_NAME` syntax.
    23	* **Exit Status:** Handles `$?` to represent the exit status of the last executed foreground pipeline.
    24	* **Built-in Commands:** Implements the following built-in commands:
    25	    * `echo` with option `-n`
    26	    * `cd` with relative or absolute paths
    27	    * `pwd` (no options)
    28	    * `export` (no options)
    29	    * `unset` (no options)
    30	    * `env` (no options or arguments)
    31	    * `exit` (no options)
    37	* `make`: Compiles the project.
    38	* `make all`:  Compiles the project.
    39	* `make clean`:  Removes object files.
    40	* `make fclean`: Removes object files and the executable.
    41	* `make re`:  Performs `fclean` followed by `make`.
