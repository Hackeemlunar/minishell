ls
history
<<<<<<< HEAD
=======
echo "CA va aller " text2.txt 
echo "CA va aller " > text2.txt 
echo "CA va aller " >> text2.txt 
clear
ls
env
export
env
export
MIT License
Copyright (c) 2025 Hackeem Mensah Bosu
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: sngantch <sngantch@student.42abudhabi.a    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/05/04 19:20:15 by hmensah-          #+#    #+#              #
#    Updated: 2025/05/25 21:48:11 by sngantch         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #
NAME = minishell
# Compiler and flags
CC = cc
CFLAGS = -Wall -Wextra -Werror -g3 -fsanitize=address
# Directories
SRC_DIR = src
OBJ_DIR = obj
LIBFT_DIR = libft
INCLUDE_DIR = include/readline
# Determine OS for libraries
UNAME := $(shell uname)
ifeq ($(UNAME), Linux)
LIB_DIR = libs/linux
LIBS = -L$(LIB_DIR) -lreadline -lhistory -lncurses
else
LIB_DIR = libs/mac
LIBS = -L$(LIB_DIR) -lreadline -lhistory -lcurses
endif
# Source files
#pipe_handler.c pipe_exec.c 
SRC_FILES =\
main.c \
builtins/builtins_utils.c builtins/env.c builtins/cd.c \
builtins/echo.c builtins/exit.c builtins/export.c builtins/pwd.c \
builtins/unset.c environments/env.c environments/env_util.c \
signals/signal.c  \
execution/expand_var.c execution/expand_var_util.c execution/sub_var.c \
execution/pipe_utils.c execution/pipe_utils1.c execution/pipe_utils2.c \
execution/pipe_exec.c \
execution/exec_utils.c execution/run_io.c execution/logical_ops.c \
execution/run_simple_cmd.c execution/run_command.c execution/exit_status.c execution/glob.c \
utils/res_helpers.c utils/main_utils.c \
parsing/lexer.c parsing/parser.c parsing/lex_extract.c parsing/lex_token.c \
parsing/lex_token_util.c parsing/parser_cmd.c parsing/parser_util.c
# Object files# Object files
OBJ_FILES = $(patsubst %.c,$(OBJ_DIR)/%.o,$(SRC_FILES))
# Include paths
INCLUDES = -I$(INCLUDE_DIR) -I$(LIBFT_DIR) -Isrc
# Libft library
LIBFT = $(LIBFT_DIR)/libft.a
# Rules
all: $(NAME)
$(NAME): $(OBJ_DIR) $(LIBFT) $(OBJ_FILES)
$(CC) $(CFLAGS) $(OBJ_FILES) $(LIBFT) $(LIBS) $(INCLUDES) -o $(NAME)
@echo "Minishell compiled successfully!"
$(OBJ_DIR):
mkdir -p $(OBJ_DIR)
mkdir -p $(OBJ_DIR)/parsing
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
@mkdir -p $(@D)
$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@
$(LIBFT):
$(MAKE) -C $(LIBFT_DIR)
clean:
$(MAKE) -C $(LIBFT_DIR) clean
rm -rf $(OBJ_DIR)
fclean: clean
$(MAKE) -C $(LIBFT_DIR) fclean
rm -f $(NAME)
re: fclean all
.PHONY: all clean fclean re
# Minishell
## Description
This project is a simple shell program, a basic implementation of a command-line interpreter. It provides an interface for users to interact with the operating system by entering commands. This Minishell project focuses on understanding fundamental concepts like processes, file descriptors, and command execution.
## Features
The following features are implemented in this Minishell:
* **Prompt Display:** Displays a prompt to the user when waiting for a new command.
* **Command History:** Maintains a history of previously entered commands.
* **Executable Search and Launch:** Locates and executes commands based on the PATH variable or using relative/absolute paths.
* **Signal Handling:** Handles `ctrl-C` (displays a new prompt), `ctrl-D` (exits the shell), and `ctrl-\` (does nothing) signals.
* **Quote Handling:** Correctly interprets single quotes (`'`) and double quotes (`"`) to prevent unwanted meta-character interpretation. Double quotes allow for environment variable expansion.
* **Redirections:**
    * `<` :  Redirects input from a file.
    * `>` :  Redirects output to a file.
    * `<<` :  "Here document" - reads input until a specified delimiter.
    * `>>` :  Redirects output to a file in append mode. [cite: 38, 39]
* **Pipes:** Supports pipes (`|`) to chain commands, where the output of one command becomes the input of the next.
* **Environment Variables:** Expands environment variables using the `$VAR_NAME` syntax.
* **Exit Status:** Handles `$?` to represent the exit status of the last executed foreground pipeline.
* **Built-in Commands:** Implements the following built-in commands:
    * `echo` with option `-n`
    * `cd` with relative or absolute paths
    * `pwd` (no options)
    * `export` (no options)
    * `unset` (no options)
    * `env` (no options or arguments)
    * `exit` (no options)
## Compilation
To compile the Minishell, use the provided Makefile. The following commands are available:
* `make`: Compiles the project.
* `make all`:  Compiles the project.
* `make clean`:  Removes object files.
* `make fclean`: Removes object files and the executable.
* `make re`:  Performs `fclean` followed by `make`.
## Usage
To run the Minishell, execute the compiled binary:
```bash
./minishellls
touch src/execution/pipeline.c
ls
ls -R 
ls | grep src
make
ls | grep src
cd ...
ls
cat Makefile 
whoami
which shell
ls
ls | grep M
ls | grep M | cat | ls | printf
printf hello
hello
ls | grep M | cat | ls | printf
ls | grep M | cat | ls | printf || (printf hello)
ls | grep M | cat | ls | printf || (printf hello)
ls | grep M | cat | ls | printf | (printf hello)
ls | grep M | (echo)
ls | grep M | printf
ls
ls | grep M | printf
ls | grep M | echo
echo $(uname -r)
echo $(uname)
ls | grep M 
ls | grep M > t.txt | wc -l
ls | grep M > t.txt | wc -l
ls | grep M | wc -l
ls | grep M > t.txt | wc -l
ls -l | grep M > t.txt | wc -l
ls -l | grep M | wc -l
ls -l
ls -l | grep M
< cat t.txt 
ls || echo "nothing"
lsss || echo "nothing"
lsss || echo "nothing"
lsss || echo "nothing"
lsss || echo "nothing"
lsss || echo "nothing"
lsssss && echo "nothing"
lsssss && echo "nothing"
cat Makefile | S
cat Makefile | s
cat Makefile | grep CC
cat Makefile | grep
cat Makefile | grep successfully
cat Makefile | grep successfully
cat Makefile | grep successfully
cat Makefile | grep successfully
cat Makefile | grep s
cat Makefile | grep s | wc -l
cat Makefile | grep s | (wc -l)
git add .
lsssss && echo "nothing"
lsssss || echo "nothing"
make
lsssss || echo "nothing"
lsssss && echo "nothing"
lsssss && echo "nothing"
lsssss || echo "nothing"
make
lsssss || echo "nothing"
lsssss && echo "nothing"
lsssss && echo "nothing"
lsssss || echo "nothing"
cat Makefile | grep s | (wc -l)
git add .
echo 'Testing pipeline' | grep NonExistent && echo 'AND operation works!' || echo 'OR operation works!'
grep NonExistent && echo 'AND operation works!'
grep NonExistent && echo 'AND operation works!'
echo 'Testing pipeline' | grep NonExistent && echo 'AND operation works!' || echo 'OR operation works!'
cat Makefile | grep s | (wc -l)
grep NonExistent && echo 'AND operation works!'
echo 'AND operation works!' || echo 'OR operation works!'
greppp NonExistent && echo 'AND operation works!'
greppp NonExistent && echo 'AND operation works!'
echo 'AND operation works!' || echo 'OR operation works!'
echoo 'AND operation works!' || echo 'OR operation works!'
cat Makefile | grep s | (wc -l)
cat Makefile | grep s | (wc -l)
cat Makefile | grep s | wc -l
echoo 'AND operation works!' || echo 'OR operation works!'
greppp NonExistent && echo 'AND operation works!'
cat Makefile &
cat Makefile
cat Makefile &
gst
cat Makefile &
cat Makefile &
cat Makefile | grep s | wc -l &
cat Makefile | grep s | wc -l &
heloo
norm
norm src/execution/
heloo
norm src/execution/
heloo
cat Makefile | grep s | wc -l &
cat Makefile | grep s | wc -l
cat Makefile | grep s | wc -l
cat Makefile | grep s | wc -l
cat Makefile | grep s | wc -l
cat Makefile | grep s | wc -w
cat Makefile | grep 
cat Makefile | grep s | wc -w
< Makefile grep hello | echo
< Makefile grep s | echo
< Makefile grep s
< Makefile grep s | wc -l
< Makefile grep s > t.txt | wc -l
< Makefile grep s > t.txt | wc -l > t.txt | echo hello
norminette src/execution/
make
echo hello
which minishell
which sh
clear
git add .
ls
rm -rf pipex/
ls
git status
git add .
git status
git commit -m "Broke the pipe file into smaller units"
git push
clear
norminette src/execution/ &
h
(norminette src/execution/)
(norminette src/execution/) > t.txt 
echo hello"
echo "hello
clear
make
make re
make
make
< Makefile grep s > t.txt | wc -l > t.txt | echo hello
< Makefile grep s > t.txt | wc -l | echo hello
< Makefile grep s > t.txt | wc -l
< Makefile cat | wc -l
< Makefile cat | wc -l
< Makefile grep s > t.txt | wc -l
< Makefile cat | grep s > t.txt | wc -l
< Makefile cat | grep s | wc -l
make
make re
make re
< Makefile cat | grep s | wc -l
norminette src/execution/
norminette src/execution/logical_ops.c 
norminette src/execution/logical_ops.c 
norminette src/execution/logical_ops.c 
norminette src/execution/logical_ops.c 
norminette src/execution/exec_utils.c 
norminette src/execution/exec_utils.c 
norminette src/execution/exec_utils.c 
norminette src/execution/executor.h 
norminette src/execution/exit_status.c 
norminette src/execution/exit_status.c 
norminette src/execution/exit_status.c 
norminette src/execution/pipe_exec.c 
make
norminette src/execution/pipe_exec.c 
< Makefile cat | grep s | wc -l
< Makefile cat | grep s | wc -l > t.txt 
cat t.txt 
cat t.txt 
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_exec.c 
clear
norminette src/execution/pipe_exec.c
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_exec.c 
norminette src/execution/pipe_utils
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils1.c 
norminette src/execution/pipe_utils2.c 
norminette src/execution/pipe_utils2.c 
norminette src/execution/pipe_utils2.c 
norminette src/execution/pipe_utils2.c 
norminette src/execution/run_command.c 
norminette src/execution/run_command.c 
make
norminette src/execution/run_command.c 
norminette src/execution/pipe_utils2.c 
cat t.txt 
< Makefile cat | grep s | wc -l
norminette src/execution/run_io.c 
norminette src/execution/run_io.c 
norminette src/execution/run_io.c 
norminette src/execution/run_io.c 
norminette src/execution/run_simple_cmd.c 
norminette src/execution/sub_var.c 
norminette src/execution/sub_var.c 
norminette src/execution/sub_var.c 
norminette src/execution/sub_var.c 
norminette src/execution/sub_var.c 
norminette src/execution/sub_var.c 
norminette src/execution/
norminette src/execution/
norminette src/execution/
norminette src/execution/expand_var.c 
norminette src/execution/expand_var.c 
norminette src/execution/expand_var.c 
norminette src/execution/expand_var.c 
norminette src/execution/expand_var.c 
norminette src/execution/expand_var.c 
norminette src/execution/
clear
norminette src/execution/
git add .
git commit -m "Normed all files in execution"
git push
catt t.txt || echo "couldnt open file"
catt t.txt && echo "couldnt open file"
cat t.txt && echo "couldnt open file"
cat t.txt || echo "couldnt open file"
clear
cat t.txt || echo "couldnt open file"
cat t.txt && echo "couldnt open file"
cat tt.txt && echo "couldnt open file"
cat tt.txt | grep 1 && echo "couldnt open file"
cat t.txt | grepp 1 && echo "couldnt open file"
make
cat t.txt | grepp 1 && echo "couldnt open file"
cat tt.txt && echo "couldnt open file"
make
cat tt.txt && echo "couldnt open file"
make
cat tt.txt && echo "couldnt open file"
cd ..
ls
pwd
git log
log
pwd
cd ..
ls
pwd
env
pwd
cd ..
pwd
cat << EOF
cat << EOF
pwd
cd ..
pwd
cd minishell
ls
ls
pwd
ls
pwd
ls
pwd
ls
pwd
ls
pwd
env
echo $VAR
echo PATH
echo $PATH
echo $SHELL
$SHELL
ls
pw
pwd
cat 
cat 
cat << EOF
cat << EOF
cat 
ls
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat
cat << EOF
cat << EOF
cat << EOF
l
ls
pwd
env
cat << EOF
ls
cat 
cat << EOF
ls
cat 
cat << EOF 
cat 
cat 
cat << EOF
ls
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF 
cat 
cat 
cat < EOF
cat << EOF
cat << EOF
ls
pwd
cat 
cat << EOF
cat
cat 
cat << EOF
cat << EOF
cat 
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF
ls
cat
cat << EOF
cat 
cat << EOF
cat << EOF
ls
cat 
cat << EOF
ls
pwd
cat 
cat << EOF
cat << EOF
cat << EOF 
cat << EOF 
cat << EOF 
cat << EOF 
ls
pwd
cat 
cat << EOF 
ls
env
pwd
env
echo jds
echo -n jds
cat 
cat 
ls
ls
pwd
cat 
cat << EOF
ls
cat 
cat << EOF
sjv
svhs
cat 
cat << EOF
cat
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat 
cat 
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat << EOF
l
ls
cat 
cat << EOF
cat << EOF
cat 
cat << EOF
cat << EOF
ls
cat 
cat 
cat < EOF
cat << EOF
ls
pwd
cat << EOF
cat 
cat 
cat 
cat
cat
cat << EOF
cat
cat
cat << EOF
cat << EOF
cat << EOF
cat << EOF
cat
cat
cat << EOF
cat 
ls
pwd
cat << EOF
cat << EOF
cat 
cat 
cat
cat << EOF
ls
pwd
cat 
cat 
cat << EOF
cat 
cat  << EOF
l
cat 
cat << EOF
cat hello
cat
echo hi
echo hi $?
./minishell 
cat << EOF
helloooo
hi
what is this
./minishell 
cat << EOF
unzip
ls *.c
ls *
ls *
ls *.c
ls *.c
ls *libf
clear
ls *libf
make
ls *libf
ls libf*
bash
ls libf*
ls lib*
ls *lib
bash
ip
ip -a
ip route
ls *lib
bash
ls *lib
make
ls *lib
ls *lib
ls lib*
ls *ib*
bash
ls *ib*
ls lib*
ls *lib
bash 
ls *lib*
ls *ib*
make
ls *ib*
ls *ib
bash
ls *lib
ls *lib*
bash
make
./minishell 
./minishell 
bash
cat << ok
ls
clear
h
./minishell 
clear
hello
hi
k
j
cat << ok | grep h
env
bash
export
bash
env
export h=hello
echo $?
echo $h
export h=hellooooooo
echo $h
export h=kkkkkkkkkkkkkkkkkkkkk
echo $h
env
git add .
git commit -m "export issues"
git push
echo
echo hello
echo hello all
echo hello
echo hello
echo hello all
echo -n hello all
echo -nn hello all
bash
echo -nn hello all
echo -nn hello all
bash
echo hello all -n
echo hello all -n > t.txt
l
ls
make
echo hello everyone
echo hello everyone
echo hello everyone -n
echo -n hello everyone
echo -n hello everyone > t
cat t
<< ok echo hello world
echo hey
hi
hey
echo hey
echo hello world
make
echo hello world
echo hello world > t 
cat t
echo hello world > t 
make
echo hello world > t 
cat t
echo -n hello world > t 
cat t
echo -n hello world
echo hello world
cat t
echo hello world
cat t
echo hello world
echo hello world
echo -n hello world
echo hello world
clear
export hello
echo $hello
export hello
echo $hello
env
export hello
env
echo $hello
echo $h
echo $
export this="./"
ls $this
env
echo $s
ls $s
export k
echo $k
env
ls src $s obj
export z
env
export k
env
env
export k
env
export k=
env
make
ls $k src
git add .
git commit -m "fixed the issue with expansion"
git push
ls ""
ls *
clear
which minishell 
whoami
echo hello world || cat t
echo hello world && cat t
echo hello && cat t
echo hello world || cat t
ls $
echo $?
echo $?
ls $
echo $?
bash
echo $?
ls hello
echo $?
hello
echo $?
make
hello
make
hello
echo $?
cat
echo $?
env hello
echo $?
make re
env hello
make re
env hello
echo $?
catt
echo $?
bash
eh
echo $?
make
cat
make
make
cat
<< ok cat
<< ok cat
bash
<< ok cat
prPj�j�hPimakeg
�f@b�]@^p[�[�V�W�ZRP USA�A=@> 8`8p�3�3�33<< ok cat0p0@2P5�>�C0DC�^0dPd
�.�.�/,.p'0)Pp��@�� ���PP�٠0��p���ΐ�������`��bash@���� �`����`���@�p����@p������``���
 н��@������`���𠰠<< ok cat�p�Э
0ЙИ<< ok cat@���0В��
����<< ok cat�{�{{�~ }
��Pxw`wv� @uu�tqhello�@@�hfc
cat^�\'��`
���� at�@'�����c@�at�
l �s�
�� 0��which ls|
�@X
X�F�C@>��99c 6�at | grep hello | wc~
cat | grep hello | wc
make
make
cat | grep hello | wc
<< ok hello
<< ok hello
<< ok hello
<< ok hello
<< ok cat
cat
make
cat
cat
<< ok cat
make
<< ok cat
<< ok cat
cat
make
cat
<< ok cat
make
<< ok cat
cat
grep hello
norminette src/minishell.h 
norminette src/minishell.h 
norminette src/minishell.h 
norminette src/minishell.h 
norminette src/minishell.h 
norminette src/minishell.h 
make
make
make
make
make
clear
clear
make
make
make
make
cat
cat
<< ok cat
make
<< ok cat
cat
bash
make
cat
make
cat
grep h
make
bash
grep h
grep
grep h
make
make
grep  h
cat
<< ok cat
<< ok cat
<< ok cat | grep h | wc -l
cat | grep h | wc -l
make
cat | grep h | wc -l
cat
cat
make
cat | grep h | wc -l
cat | grep h | wc -l
make
cat | grep h | wc -l
cat | grep h | wc -l
bash
cat | grep h | wc -l
grep h
<< ok echo
<< ok cat
cat | grep h | wc -l
echo $?
echo $?
echo $?
echo $?
echo $?
cat
echo $?
git reset --hard
make
cat
cat
<< ok cat
<< ok cat
echo $?
make
echo $?
<< ok cat
echo $?
bash
cat
sleep 10
cat 
cat 
ls
cat
cat 
sleep 10
grep "sjhjs"
cat
cat
cat
ls
cat
cat 
cat
sleep 10
grep "JEle,l"
grep "JEle,l"
grep "JEle,l"
grep "JEle,l"
grep "JEle,l"
grep "JEle,l"
echo "cat lol.c | cat >lol.c"
echo "cat lol.c | cat >lol. fvs'c"
echo "cat lol.c | cat >lol24t42. fvs'c"
echo "cat lol.c | cat >lol24t42. fvs'c7555y5u5j[-o]o["
echo 'USER'
env
echo 'HOME"
echo 'HOME'
echo '$HOME'
echo $HOME
export new_one=NOUVELLE
env
echo $new_one
cd ..
ls'
ls
cd /bin/ls
cd ..
ls
cd M3
cd minishell
cd src/
pwd
clear
ls
cd ..
ls
echo $PATH
unset #PATH
ls
pwd
ech $PATH
export PATH=/Users/sngantch/.nvm/versions/node/v22.15.1/bin:/Users/sngantch/.nvm/versions/node/v22.15.1/bin:/Users/sngantch/.pyenv/shims:/Users/sngantch/.pyenv/bin:/Users/sngantch/.docker/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Users/sngantch/.nvm/versions/node/v22.15.1/bin:/Users/sngantch/.pyenv/bin:/Users/sngantch/.docker/bin:/Users/sngantch/42-ValgrindContainer:/Users/sngantch/Library/Application Support/Code/User/globalStorage/github.copilot-chat/debugCommand:/Users/sngantch/42-ValgrindContainer
ech $PATH
export PATH=dir1:dir2
env
echo &PATH
echo $PATH
unset PATH
echo $PATH
export PATH="/Users/sngantch/.nvm/versions/node/v22.15.1/bin:/Users/sngantch/.nvm/versions/node/v22.15.1/bin:/Users/sngantch/.pyenv/shims:/Users/sngantch/.pyenv/bin:/Users/sngantch/.docker/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Users/sngantch/.nvm/versions/node/v22.15.1/bin:/Users/sngantch/.pyenv/bin:/Users/sngantch/.docker/bin:/Users/sngantch/42-ValgrindContainer:/Users/sngantch/Library/Application Support/Code/User/globalStorage/github.copilot-chat/debugCommand:/Users/sngantch/42-ValgrindContainer"
echo $PATH
echo $PATH
unset PATH
echo $PATH
ls
ls
export PATH=src
ls
ls
echo
echo -n sjdsv
echo $PATH
export PATH=src:libft
ls
echo $PATH
echo $PATH
echo $PATH
ls
unset PATH
ls
echo
export PATH=src
echo $PATH
env
export PATH=src
ls
pwd
ls
ech
export PATH=src:src2
echo 
echo $PATH
ls
cat
pwd
cat 
ls
ls
cat
sleep 2
sleep 45
cat text2.txt | grep crois
cat text2.txt | grep ls
cat text2.txt | grep crois | wc -l
history
echo "CA va aller " text2.txt 
echo "CA va aller " > text2.txt 
echo "CA va aller " >> text2.txt 
clear
ls
env
export
env
export
����maximum macro execution nesting level exceeded%sreadline_callback_read_char() called with no handler!COLUMNScoLINESlidumb��� �6
05 P000'� �� at�@�� Pp� at�@��amxnkm@7DCE3ICceclcrdceiicimkDkHkIkNkPkdkekhklkrkskulemmmondpcsesoupvbvsve#LC_CTYPECLC_ALLLANGUTF-8utf8POSIX(arg: %d) X%lu k�noP��@�pP������@�����ФЫ�ૠ�й� �Ġ��������
= i i
;&()|<>^$*%-:$*%^event not foundbad word specifiersubstitution failedunrecognized history modifierno previous substitution<>;&|"'`<>$!@?+*HOME.history.tmp ~~target00.readline-colored-completion-prefixm001;3401;363301;3501;3301;3237;4130;4337;4434;4230;4230;41LS_COLORS??LS_COLORS: unrecognized prefix: %sLS_COLORS: syntax error: %sunparsable value for LS_COLORS environment variablelcrcecrsnofidilnpibdcdmiorexdosusgstowtwcamhxmallocxrealloc%s: out of virtual memory S0TK
��0PP�7!�X88src/main.csrc/builtins/builtins_utils.csrc/builtins/env.csrc/builtins/cd.csrc/builtins/echo.csrc/builtins/exit.csrc/builtins/export.csrc/builtins/pwd.csrc/signals/signal.csrc/execution/sub_var.csrc/execution/pipe_utils1.csrc/execution/pipe_utils2.csrc/execution/pipe_exec.csrc/execution/exec_utils.csrc/execution/run_io.csrc/execution/logical_ops.csrc/execution/run_simple_cmd.csrc/execution/run_command.csrc/execution/glob.csrc/parsing/lex_token.cP�A A0 JKC
�`:�=7�=p>�>
�p���p�м��й0�P�p��~�~x�x�0{@{z< ok cats�s�s�tPu�u�v�v�w`�0�p�p��������
����maximum macro execution nesting level exceeded%sreadline_callback_read_char() called with no handler!COLUMNScoLINESlidumb��� �6
05 P000'� �� at�@�� Pp� at�@��amxnkm@7DCE3ICceclcrdceiicimkDkHkIkNkPkdkekhklkrkskulemmmondpcsesoupvbvsve#LC_CTYPECLC_ALLLANGUTF-8utf8POSIX(arg: %d) X%lu k�noP��@�pP������@�����ФЫ�ૠ�й� �Ġ��������
= i i
;&()|<>^$*%-:$*%^event not foundbad word specifiersubstitution failedunrecognized history modifierno previous substitution<>;&|"'`<>$!@?+*HOME.history.tmp ~~target00.readline-colored-completion-prefixm001;3401;363301;3501;3301;3237;4130;4337;4434;4230;4230;41LS_COLORS??LS_COLORS: unrecognized prefix: %sLS_COLORS: syntax error: %sunparsable value for LS_COLORS environment variablelcrcecrsnofidilnpibdcdmiorexdosusgstowtwcamhxmallocxrealloc%s: out of virtual memory S0TK
��0PP�7!�X88src/main.csrc/builtins/builtins_utils.csrc/builtins/env.csrc/builtins/cd.csrc/builtins/echo.csrc/builtins/exit.csrc/builtins/export.csrc/builtins/pwd.csrc/signals/signal.csrc/execution/sub_var.csrc/execution/pipe_utils1.csrc/execution/pipe_utils2.csrc/execution/pipe_exec.csrc/execution/exec_utils.csrc/execution/run_io.csrc/execution/logical_ops.csrc/execution/run_simple_cmd.csrc/execution/run_command.csrc/execution/glob.csrc/parsing/lex_token.cP�A A0 JKC
�`:�=7�=p>�>
�p���p�м��й0�P�p��~�~x�x�0{@{z< ok cats�s�s�tPu�u�v�v�w`�0�p�p��������
echo $
echo $PWD
echo "$PWD"
echo "$PWD$"
echo "$PWD$"
echo "$PWD $"
echo "$PWD$"
env
echo $PWD
echo $PWD$
echo "$PWD$"
echo $PWD$
echo "$PWD$"
echo '$PWD$'
echo "$PWD$"
echo $PWD$
echo "$PWD $"
echo "$PWD $A"
echo $A
ls>>a
ls>a>a
ls<>a
ls>>>a
ls<<<a
echo $$
echo $
echo $$
echo "$$"
env
export
export a=
echo $a
export a=""
echo $a
export a="234"
echo $a
ls |
ls |
ls |
| pwd
ls | pwd
echo $?
export PATH=
ls
pwd
cat | cat
export PATH=""
ls
cat
export>a
export>asd
export > 2
env>a
env a=
env a
env a=
UNSET COLORTERM COMMAND_MODE GIT_ASKPASS HOME LANG LOGNAME LaunchInstanceID MallocNanoZone NVM_BIN NVM_CD_FLAGS NVM_DIR NVM_INC
OLDPWD ORIGINAL_XDG_CURRENT_DESKTOP PATH PWD PYENV_SHELL SECURITYSESSIONID SHELL SHLVL SSH_AUTH_SOCK TERM TERM_PROGRAM TERM_PROGRAM_VERSION TMPDIR USER USER_ZDOTDIR VSCODE_GIT_ASKPASS_EXTRA_ARGS VSCODE_GIT_ASKPASS_MAIN VSCODE_GIT_ASKPASS_NODE VSCODE_GIT_IPC_HANDLE VSCODE_INJECTION VSCODE_PROFILE_INITIALIZED XPC_FLAGS XPC_SERVICE_NAME ZDOTDIR __CF_USER_TEXT_ENCODING
unset A
UNSET a
unset COLORTERM COMMAND_MODE GIT_ASKPASS HOME LANG LOGNAME LaunchInstanceID MallocNanoZone NVM_BIN NVM_CD_FLAGS NVM_DIR NVM_INC
OLDPWD ORIGINAL_XDG_CURRENT_DESKTOP PATH PWD PYENV_SHELL SECURITYSESSIONID SHELL SHLVL SSH_AUTH_SOCK TERM TERM_PROGRAM TERM_PROGRAM_VERSION TMPDIR USER USER_ZDOTDIR VSCODE_GIT_ASKPASS_EXTRA_ARGS VSCODE_GIT_ASKPASS_MAIN VSCODE_GIT_ASKPASS_NODE VSCODE_GIT_IPC_HANDLE VSCODE_INJECTION VSCODE_PROFILE_INITIALIZED XPC_FLAGS XPC_SERVICE_NAME ZDOTDIR __CF_USER_TEXT_ENCODING
ls
env
unset SHLVL
env
unset PATH LOGNAME
env
unset COLORTERM COMMAND_MODE GIT_ASKPASS HOME LANG LOGNAME LaunchInstanceID MallocNanoZone NVM_BIN NVM_CD_FLAGS NVM_DIR NVM_INC
OLDPWD ORIGINAL_XDG_CURRENT_DESKTOP PATH PWD PYENV_SHELL SECURITYSESSIONID SHELL SHLVL SSH_AUTH_SOCK TERM TERM_PROGRAM TERM_PROGRAM_VERSION TMPDIR USER USER_ZDOTDIR VSCODE_GIT_ASKPASS_EXTRA_ARGS VSCODE_GIT_ASKPASS_MAIN VSCODE_GIT_ASKPASS_NODE VSCODE_GIT_IPC_HANDLE VSCODE_INJECTION VSCODE_PROFILE_INITIALIZED XPC_FLAGS XPC_SERVICE_NAME ZDOTDIR __CF_USER_TEXT_ENCODING
env
env
unset COLORTERM COMMAND_MODE GIT_ASKPASS HOME LANG LOGNAME LaunchInstanceID MallocNanoZone NVM_BIN NVM_CD_FLAGS NVM_DIR NVM_INC
OLDPWD ORIGINAL_XDG_CURRENT_DESKTOP PATH PWD PYENV_SHELL SECURITYSESSIONID SHELL SHLVL SSH_AUTH_SOCK TERM TERM_PROGRAM TERM_PROGRAM_VERSION TMPDIR USER USER_ZDOTDIR VSCODE_GIT_ASKPASS_EXTRA_ARGS VSCODE_GIT_ASKPASS_MAIN VSCODE_GIT_ASKPASS_NODE VSCODE_GIT_IPC_HANDLE VSCODE_INJECTION VSCODE_PROFILE_INITIALIZED XPC_FLAGS
env
env
usnet LaunchInstanceID
unset LaunchInstanceID
unset _
unset TERM_PROGRAM
unset TERM_PROGRAM_VERSION
env
env
export =
export a=
export 1=
unset PATH
ls
pwd
echo $$$$
unset ""
unset ASDASDASD
export a=1
echo $a
unset a
echo $a
cd ...
mkdir 1
ls><a
ls<<
ls>>
ls>> 
ls>$A
cat | cat | ls
adfasdf
ls
lsss
lss
pwdd
pw
pwd
\
"
ls>>"$USER"
ls
rm "$USER"
ls>>"$USER"
l
ls
ls
make
make
ls>>"$USER"
ls
rm ace
rm ace
ls>>"$USER"
ls
cat ace
cat asd
rm asd ace
ls
ls
make
ls>>"$USER"
ls
rm ace
echo "$PWD$"
ls>>$
bash
ls>>$
make
ls>>$
ls>>$
make
ls>>$
ls
cat hello
echo "$helloo"
echo "$PATH"
echo "$PATH$"
echo "$PATH $"
echo "$PATH$"
bash
echo "$"
mkdir ''
mkdir ""
echo $
echo $PSTH
echo $PATH
echo $PATH$
make
echo "$PATH$"
echo "$PATH"
echo "$PATHs"
echo "$PATH$"
ls |
ls |
ls |>a
make
ls |>a
ls | cat>a
make
ls | >a
make
ls | >a
make
make
ls | >a
ls |>a
git add.
echo hello
printf hi
la >>a>>b
ls >>a>>b
git log
make
