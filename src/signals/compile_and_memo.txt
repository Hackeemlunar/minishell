
                >>>>>>>>>>>>>TEST COMPILATION<<<<<<<<<<<<<<
cc signal.c main_test.c ../../libs/mac/*.a ../../libft/libft.a -lcurses -o minishell
                >>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<


src/signals/signal.c contains several functions that handle signals in a shell program. 
 Signals are asynchronous events that can occur during the execution of a program, 
 such as keyboard interrupts or termination requests.

Signal Handlers

There are three signal handler functions defined in the file:

signal_handler: This function handles SIGINT and SIGQUIT signals. 

When SIGINT is received, it prints a newline character to the standard error stream, 
replaces the current line in the readline buffer, moves the cursor to a new line, 
and redraws the entire readline display. When SIGQUIT is received, it does nothing.
signal_handler_input: This function handles SIGINT and SIGQUIT signals, 
'but its implementation is not shown in the provided code snippet.



signal_handler_herdoc: This function handles SIGINT signals specifically for heredoc input. 
When SIGINT is received, it prints a newline character to the standard output stream, 
reads the child process ID from a temporary file, and sends a SIGKILL signal to the child process.
Signal Registration

The set_signal_handler function is responsible for registering the signal handlers with the operating system. 
It takes a t_cmd structure as an argument, which likely represents a command or a type of input. 
Based on the value of tree->type, it registers either signal_handler_herdoc 
or signal_handler_input as the signal handler for SIGINT and SIGQUIT.

Setup Signals
The setup_signals function is called to initialize the signal handling mechanism. 
It registers signal_handler as the signal handler for SIGINT and ignores SIGQUIT signals.

Signals Handled

The following signals are handled in the provided code snippets:

SIGINT: Generated by Ctrl+C, handled by signal_handler, signal_handler_input, and signal_handler_herdoc.
SIGQUIT: Generated by Ctrl+, handled by signal_handler and signal_handler_input.
Note that the implementation of signal_handler_input is not shown, so its exact behavior is unknown. 
Additionally, the t_cmd structure and its type field are not defined in the provided code snippets, 
so the exact logic behind the signal registration is not clear.
